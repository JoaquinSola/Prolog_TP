%La base de datos utilizada es la misma que se proporciono con el archivo "anexo".
%avanzar/3
%Ejemplo 1:
?- avanzar(worm([[1,2],[1,3],[1,4]]),Worm,D).
	Worm = worm([[2, 2], [1, 2], [1, 3]]),
	D = b ;
	Worm = worm([[0, 2], [1, 2], [1, 3]]),
	D = a ;
	Worm = worm([[1, 1], [1, 2], [1, 3]]),
	D = i ;
	Worm = worm([[1, 3], [1, 2], [1, 3]]),
	D = d ;
false.
% Se contempla aqui que no se realizan validaciones de posiciones ya que en el 2do resultado el worm esta fuera del plano (que es de 11x11)
% y ademas en el segundo resultado el worm vuelve sobre si mismo (la cabeza es parte del cuerpo).
%Ejemplo2:
?- avanzar(worm([[1,0],[1,1],[1,2]]),Worm,D).
	Worm = worm([[2, 0], [1, 0], [1, 1]]),
	D = b ;
	Worm = worm([[0, 0], [1, 0], [1, 1]]),
	D = a ;
	Worm = worm([[1, -1], [1, 0], [1, 1]]),
	D = i ;
	Worm = worm([[1, 1], [1, 0], [1, 1]]),
	D = d ;
false.
%De nuevo se denota la no validacion ya que se arranca con un worm fuera del plano y hay una posicion negativa (2do resultado).

%seguro/1
%Ejemplo1:
?- seguro(juego(worm([[1,1],[1,2],[1,3]]),comida([]))).
(la no respuesta es equivalente a true debido a la versión del programa)

%Ejemplo2: 
?- seguro(juego(worm([[1,1],[1,2],[1,2]]),comida([]))).
false.
%Este ejemplo es falso porque el worm se esta chocando consigo mismo, es decir, que la cabeza forma parte del resto del worm.

%Ejemplo3:
?- seguro(juego(worm([[1,2],[1,1],[1,0]]),comida([]))).
false.
%En este ejemplo es falso porque una parte del worm se encuentra fuera del plano.

%Ejemplo4:
?- seguro(juego(worm([[1,3],[2,3],[2,4]]),comida([]))).
false.
%En este ejemplo el resultado es falso porque una parte del worm esta colisionando con un objeto.

%movimiento/4:
%Ejemplo1:
?- movimiento(juego(worm([[1,1],[1,2],[1,3]]),comida([11,11])),J,0,L).
	J = juego(worm([[1, 1], [1, 2], [1, 3]]), comida([11, 11])),
	L = [] ;
false.
%Como la cantidad de movimientos que debe hacer el worm es 0, entonces se devuelve el mismo worm.

%Ejemplo2:
?- movimiento(juego(worm([[1,1],[1,2],[1,3]]),comida([11,11])),J,1,L).
	J = juego(worm([[2, 1], [1, 1], [1, 2]]), comida([11, 11])),
	L = [b] ;
false.
%Si se compara la posicion del worm con los extremos del plano y la lista de obstaculos, se puede concluir que el unico movimiento
% que puede realizar sin salirse del plano, chocar con un obstaculo ni volver sobre sí mismo es en la direccion b (abajo).

%Ejemplo3:
?- movimiento(juego(worm([[3,4],[3,5],[3,6]]),comida([11,11])),J,2,L).
	J = juego(worm([[5, 4], [4, 4], [3, 4]]), comida([11, 11])),
	L = [b, b] ;
	J = juego(worm([[4, 3], [4, 4], [3, 4]]), comida([11, 11])),
	L = [b, i] ;
	J = juego(worm([[4, 5], [4, 4], [3, 4]]), comida([11, 11])),
	L = [b, d] ;
	J = juego(worm([[1, 4], [2, 4], [3, 4]]), comida([11, 11])),
	L = [a, a] ;
	J = juego(worm([[2, 5], [2, 4], [3, 4]]), comida([11, 11])),
	L = [a, d] ;
false.
%grafica(worm([[3,4],[3,5],[3,6]])).
%           1
% ##        2
% ##HOO ##  3
%       ##  4
%           5
%           6
%   ###     7
%           8
%   ###     9
%           10
%           11
%12345678901
%Observando la grafica, se puede ver que el worm tiene mas libertado para moverse, dando asi distintos resultados para moverse.

%Ejemplo4:
?- movimiento(juego(worm([[3,3],[3,4],[3,5]]),comida([11,11])),J,2,L).
false.
%En este caso no se realizan movimientos ya que se trata de mover un worm que no es seguro (en este caso la cabeza esta sobre un obstaculo).

%intento/4
%Para ver el correcto funcionamiento del predicado, siempre se debe pasar un valor de N con el que se empieza a comparar, de otra manera el mismo no funcionara.

%Ejemplo1:
?- intento(juego(worm([[3,4],[3,5],[3,6]]),comida([11,11])),J,1,L).
	J = juego(worm([[4, 4], [3, 4], [3, 5]]), comida([11, 11])),
	L = [b] ;
	J = juego(worm([[2, 4], [3, 4], [3, 5]]), comida([11, 11])),
	L = [a] ;
	J = juego(worm([[5, 4], [4, 4], [3, 4]]), comida([11, 11])),
	L = [b, b] ;
	J = juego(worm([[4, 3], [4, 4], [3, 4]]), comida([11, 11])),
	L = [b, i] ;
	J = juego(worm([[4, 5], [4, 4], [3, 4]]), comida([11, 11])),
	L = [b, d] ;
	J = juego(worm([[1, 4], [2, 4], [3, 4]]), comida([11, 11])),
	L = [a, a] ;
	J = juego(worm([[2, 5], [2, 4], [3, 4]]), comida([11, 11])),
	L = [a, d] ;
	J = juego(worm([[6, 4], [5, 4], [4, 4]]), comida([11, 11])),
	L = [b, b, b] ;
	J = juego(worm([[5, 3], [5, 4], [4, 4]]), comida([11, 11])),
	L = [b, b, i] ;
	J = juego(worm([[5, 5], [5, 4], [4, 4]]), comida([11, 11])),
	L = [b, b, d] ;
	J = juego(worm([[5, 3], [4, 3], [4, 4]]), comida([11, 11])),
	L = [b, i, b] ;
	J = juego(worm([[4, 2], [4, 3], [4, 4]]), comida([11, 11])),
	L = [b, i, i] ;
	J = juego(worm([[5, 5], [4, 5], [4, 4]]), comida([11, 11])),
	L = [b, d, b] ;
	J = juego(worm([[3, 5], [4, 5], [4, 4]]), comida([11, 11])),
	L = [b, d, a] ;
	J = juego(worm([[4, 6], [4, 5], [4, 4]]), comida([11, 11])),
	L = [b, d, d] .
...
%En estos casos donde no se pretende que el worm llegue a una posicion especifica, la cantidad de soluciones es muy grande.

%Ejemplo2:
?- intento(juego(worm([[3,4],[3,5],[3,6]]),comida([11,11])),juego(worm([[3,1]|_]),_),1,L).
	L = [b, i, i, i, a] ;
	L = [b, b, i, a, i, i, a] ;
	L = [b, b, i, i, a, i, a] ;
	L = [b, b, i, i, i, a, a] ;
	L = [b, i, b, i, a, i, a] ;
	L = [b, i, b, i, i, a, a] ;
	L = [b, i, i, b, i, a, a] ;
	L = [a, a, i, i, i, b, b] .
...
%Cuando se especifica donde debe llegar la cabeza del worm, se aprecia que la cantidad minima requerida de movimientos es 5, y no 
% pudo unificar con listas de menos movimientos, igualmente la cantidad se soluciones sigue siendo muy grande.

%Ejemplo3:
?- intento(juego(worm([[3,4],[3,5],[3,6]]),comida([11,11])),J,1,[a,a,i,i,i]).
	J = juego(worm([[1, 1], [1, 2], [1, 3]]), comida([11, 11])) ;
false.
%Aqui se da una lista determinada de movimientos, luego el predicado unifica con el unico worm posible que cumple esos avances y es seguro.

%Ejemplo4:
?- intento(juego(worm([[3,4],[3,5],[3,6]]),comida([11,11])),J,6,[a,a,i,i,i]).
false.
%Da falso porque se quiere realizar 5 avances a partir de 6 movimientos, lo cual es un absurdo.

%creceWorm/2

%Ejemplo1:
?- creceWorm(worm([[3,4],[3,5],[3,6]]),W).
	W = worm([[3, 4], [3, 5], [3, 6], [3, 6], [3, 6], [3, 6]]) ;
false.
%Este predicado es bastante simple, solamente se replica la ultima posicion del worm la cantidad de veces que indique la base de datos,
% si esta se cambia el worm crecera mas o menos dependiendo del nuevo valor asociado.

%jugar/4:

%Ejemplo1:
?- jugar(juego(worm([[3,4],[3,5],[3,6]]),comida([[5,5]])),J,L,P).
	J = juego(worm([[5, 5], [5, 4], [4, 4], [4, 4], [4, 4], [4|...]]), comida([])),
	L = [[b, b, d]],
	P = 10 ;
false.
%El worm intenta llegar a la unica comida de la lista, crece y luego calcula un puntaje, luego L es la lista de listas
% que contiene cada uno de los movimientos requeridos para llegar a la comida.

%Ejemplo2:
?- jugar(juego(worm([[3,4],[3,5],[3,6]]),comida([])),J,L,P).
	J = juego(worm([[3, 4], [3, 5], [3, 6]]), comida([])),
	L = [] ;
false.
%Como no hay comidas para crecer, el juego carece de sentido, entonces el worm no se movera.
%NOTA: A partir de dos o mas comidas presentes en el juego, se deberá esperar un intervalo no muy largo de tiempo para que el
%programa calcule las soluciones

%Ejemplo3:
?- jugar(juego(worm([[3,4],[3,5],[3,6]]),comida([[5,5],[11,6],[1,11],[1,9],[1,5]])),J,L,P),write(L),write(J).
	[[b,b,d],[a,a,a,a,d,a],[a,d,a,a,a,a,a,a,a,a,a,d,d,d,d],[b,b,b,b,i,a,a,a,i,a],[i,i,i,i]]
	juego(worm([[1,5],[1,6],[1,7],[1,8],[1,9],[2,9],[2,10],[3,10],[4,10],[5,10],[5,11],[4,11],[3,11],[2,11],[1,11],[1,11],[1,11],[1,11]]),comida([]))
	J = juego(worm([[1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [2|...], [...|...]|...]), comida([])),
	L = [[b, b, d], [a, a, a, a, d, a], [a, d, a, a, a, a|...], [b, b, b, b, i|...], [i, i, i, i]],
	P = 50 ;
false.
%Se muestra el juego resultante con el worm crecido, la lista de comida vacias y una lista en donde cada uno de sus elementos
% es otra lista con los movimientos hacia cada una de las comidas.


